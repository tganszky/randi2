<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">




	<!--
		======================= BEGINN Security for WEB
		=========================
	-->


	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider ref="authenticationProvider" />
	</sec:authentication-manager>


	<bean id="springSecurityFilterChainProxy" class="org.springframework.security.web.FilterChainProxy">
		<sec:filter-chain-map path-type="ant">
			<sec:filter-chain
				filters="securityContextPersistenceFilter,formLoginFilter,logoutFilter,anonymousAuthFilter"
				pattern="/**" />
		</sec:filter-chain-map>

	</bean>

	<bean id="securityContextPersistenceFilter"
		class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<property name="forceEagerSessionCreation" value="true" />
	</bean>

	<bean id="formLoginFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler">
			<bean
				class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
				<property name="defaultTargetUrl" value="/faces/randi2.xhtml" />
			</bean>
		</property>
		<property name="sessionAuthenticationStrategy">
			<bean
				class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy" />
		</property>
		<property name="authenticationFailureHandler">
			<bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<property name="defaultFailureUrl" value="/faces/login.xhtml" />
			</bean>
		</property>
	</bean>


	<bean id="anonymousAuthFilter"
		class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<property name="key" value="ANONYMOUS_USER" />
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS" />
	</bean>

	<bean id="anonymousAuthenticationProvider"
		class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
		<property name="key" value="ANONYMOUS_USER" />
	</bean>

	<bean id="logoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="/faces/goodbye.xhtml" />
		<constructor-arg>
			<list>
				<bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="authenticationProvider"
		class="de.randi2.utility.security.DaoAuthenticationProviderWithLock">
		<property name="userDetailsService">
			<bean class="de.randi2.dao.UserDetailsServiceImpl"></bean>
		</property>
		<property name="passwordEncoder" ref="passwordEncoder" />
		<property name="saltSource" ref="saltSourceUser" />
	</bean>

	<!-- The passwords will be hashed with the SHA-256 algorithm -->
	<bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<constructor-arg value="256" />
	</bean>

	<!--
		Before hashing the user password will be salted with an
		object-dependent "salt"
	-->
	<bean id="saltSourceUser"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<property name="userPropertyToUse" value="username"></property>
	</bean>

	<!--
		Before hashing the trial site password will be salted with an
		object-dependent "salt"
	-->
	<bean id="saltSourceTrialSite"
		class="org.springframework.security.authentication.dao.SystemWideSaltSource">
		<property name="systemWideSalt" value="DSJGEWI8SDG46ASGJAER436234ERDFZHS9346" />
	</bean>

	<!--
		======================= END Security for WEB =========================
	-->


	<!--
		======================= Definition ACL Service =======================
	-->
	<bean id="aclService" class="de.randi2.dao.HibernateAclService"></bean>

	<!--
		======================= Mapping between the roles and rights
		=======================
	-->
	<bean id="rolesAndRights" class="de.randi2.utility.security.RolesAndRights">
	</bean>

	<bean id="securityAspects" class="de.randi2.aspects.SecurityAspects"></bean>
	<!-- import the other configurations -->
	<import
		resource="classpath:META-INF/subconfig/security/security-permissions.xml" />
	<import resource="classpath:META-INF/subconfig/security/security-voter.xml" />
	<import
		resource="classpath:META-INF/subconfig/security/security-accessDecisionManager.xml" />
	<import
		resource="classpath:META-INF/subconfig/security/security-method-interceptor.xml" />


</beans>